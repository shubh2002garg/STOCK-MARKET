import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Download Stock Data
stock_symbol = "AAPL"  # Change this to any stock symbol
stock_data = yf.download(stock_symbol, start="2020-01-01", end="2024-01-01")
stock_data["Date"] = stock_data.index  # Convert index to a column
stock_data = stock_data[["Date", "Open", "High", "Low", "Close", "Volume"]]

# Feature Engineering
stock_data["Price_Change"] = stock_data["Close"] - stock_data["Open"]
stock_data["Daily_Return"] = stock_data["Close"].pct_change()
stock_data["Moving_Avg_10"] = stock_data["Close"].rolling(window=10).mean()
stock_data["Moving_Avg_50"] = stock_data["Close"].rolling(window=50).mean()
stock_data.dropna(inplace=True)

# Prepare Data for Model Training
features = ["Open", "High", "Low", "Volume", "Moving_Avg_10", "Moving_Avg_50"]
target = "Close"
X = stock_data[features]
y = stock_data[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate the Model
y_pred = model.predict(X_test)
print("Mean Absolute Error:", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))

# Plot Actual vs Predicted Prices
plt.figure(figsize=(10, 5))
plt.plot(y_test.values, label="Actual Prices", color='blue')
plt.plot(y_pred, label="Predicted Prices", color='red')
plt.legend()
plt.title(f"{stock_symbol} Stock Price Prediction")
plt.show()
